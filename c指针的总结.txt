int *p; 定义一个指针                  p指向的开始地址 按int截取地址单元数组成一个int数 即*p 
*P取指针(地址单元)对应的内容         *p1=*p2;  表示p1地址单元的内容变成了p2地址单元的内容;
p=&a;  取a变量的地址  赋值给指针


##数组的指针  多维数组用
int (*p)[2];  定义一个指针 指向一个是包含2个元素的数组  
int a[3][2];
p=a;                                      2维数组存放的是一维地址的首地址组成2维
p代表是2维地址的首地址 等于a[0][0]
*p代表的是a[0]的首地址
*(p+1) 代表的是a[1]的首单元地址,可以理解 一次+1表示加(int (*p)[2]; )上定义的2个一维数组的长度
*(p+1)+2 代表的是a[1][2]的单元地址
**p代表的是a[0][0]的单元地址的 内容

##指针的数组  int *p[2];  p={&a[1],&a[2]}     数组存放的是一些指针

##指针函数  int *p();   函数返回一个指针变量

##函数指针  int (*p)();  指向一个函数的指针

void s(int (*p)()){  参数是一个函数指针
do something;
}
void test();//函数
s(test); //函数指针p指向一个test函数;  


##int **p;  p是指向一个int *p指针,的指针;  


##字符数组 和指针数组
char a[]="hi jim";  //存放的是一系列的内存单元,按字符存放   可以改变ji jim 数组的值
char *p="hi jijm";  //p存放的是字符串的offset地址    不可以改变p指向的hi jijm常量的值













